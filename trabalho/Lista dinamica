#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Estrutura para armazenar os dados de um paciente
typedef struct {
    char nome[100];
    char sexo;
    char nascimento[11]; // Formato: dd/mm/aaaa
    char ultima_consulta[11]; // Formato: dd/mm/aaaa
} Paciente;

// Estrutura de um nó da lista duplamente encadeada
typedef struct No {
    Paciente paciente;
    struct No* proximo;
    struct No* anterior;
} No;

// Estrutura da lista duplamente encadeada
typedef struct {
    No* inicio;
    No* fim;
} ListaDupla;

// Função para criar uma nova lista vazia
ListaDupla* criar_lista() {
    ListaDupla* lista = (ListaDupla*)malloc(sizeof(ListaDupla));
    lista->inicio = NULL;
    lista->fim = NULL;
    return lista;
}

// Função para inserir um paciente na lista de forma ordenada (Z-A)
void inserir_ordenado(ListaDupla* lista, Paciente paciente) {
    No* novo_no = (No*)malloc(sizeof(No));
    novo_no->paciente = paciente;
    novo_no->proximo = NULL;
    novo_no->anterior = NULL;

    // Caso a lista esteja vazia
    if (lista->inicio == NULL) {
        lista->inicio = novo_no;
        lista->fim = novo_no;
    } else {
        No* atual = lista->inicio;
        while (atual != NULL && strcmp(atual->paciente.nome, paciente.nome) > 0) {
            atual = atual->proximo;
        }

        // Inserir no início
        if (atual == lista->inicio) {
            novo_no->proximo = lista->inicio;
            lista->inicio->anterior = novo_no;
            lista->inicio = novo_no;
        }
        // Inserir no final
        else if (atual == NULL) {
            novo_no->anterior = lista->fim;
            lista->fim->proximo = novo_no;
            lista->fim = novo_no;
        }
        // Inserir no meio
        else {
            novo_no->proximo = atual;
            novo_no->anterior = atual->anterior;
            atual->anterior->proximo = novo_no;
            atual->anterior = novo_no;
        }
    }
}

// Função para buscar um paciente pelo nome
Paciente* buscar_paciente(ListaDupla* lista, char* nome) {
    No* atual = lista->inicio;
    while (atual != NULL) {
        // Remove espaços em branco no início e no final do nome
        char nome_paciente[100];
        strcpy(nome_paciente, atual->paciente.nome);
        nome_paciente[strcspn(nome_paciente, "\n")] = '\0'; // Remove a quebra de linha, se houver

        if (strcmp(nome_paciente, nome) == 0) {
            return &(atual->paciente);
        }
        atual = atual->proximo;
    }
    return NULL; // Paciente não encontrado
}

// Função para exibir os dados de um paciente
void exibir_paciente(Paciente* paciente) {
    if (paciente != NULL) {
        printf("Nome: %s\n", paciente->nome);
        printf("Sexo: %c\n", paciente->sexo);
        printf("Data de Nascimento: %s\n", paciente->nascimento);
        printf("Última Consulta: %s\n", paciente->ultima_consulta);
    } else {
        printf("Paciente não encontrado.\n");
    }
}

// Função para listar todos os pacientes da lista
void listar_pacientes(ListaDupla* lista) {
    No* atual = lista->inicio;
    if (atual == NULL) {
        printf("Nenhum paciente cadastrado.\n");
        return;
    }

    printf("\n--- Lista de Pacientes ---\n");
    while (atual != NULL) {
        exibir_paciente(&(atual->paciente));
        printf("\n");
        atual = atual->proximo;
    }
}

// Função para remover caracteres indesejados (aspas e < >)
void limpar_string(char* str) {
    int i, j = 0;
    for (i = 0; str[i] != '\0'; i++) {
        if (str[i] != '"' && str[i] != '<' && str[i] != '>') {
            str[j++] = str[i];
        }
    }
    str[j] = '\0';
}

// Função para carregar os pacientes do arquivo CSV
void carregar_pacientes(ListaDupla* lista, char* nome_arquivo) {
    FILE* arquivo = fopen(nome_arquivo, "r");
    if (arquivo == NULL) {
        printf("Erro ao abrir o arquivo.\n");
        return;
    }

    char linha[256];
    while (fgets(linha, sizeof(linha), arquivo)) {
        // Remove as aspas e os símbolos < > da linha
        limpar_string(linha);

        Paciente paciente;
        sscanf(linha, "%[^,], %c, %[^,], %s", paciente.nome, &paciente.sexo, paciente.nascimento, paciente.ultima_consulta);

        if (paciente.sexo == 'M') {
            inserir_ordenado(lista, paciente);
        }
    }

    fclose(arquivo);
}

// Função para exibir o menu de pacientes do Moisés
void menu_moises(ListaDupla* lista) {
    int opcao;
    char nome[100];

    do {
        printf("\n--- Pacientes do Moisés ---\n");
        printf("1. Consultar paciente\n");
        printf("2. Listar todos os pacientes\n");
        printf("3. Cadastrar paciente\n");
        printf("4. Alterar cadastro do paciente\n");
        printf("5. Voltar\n");
        printf("Escolha uma opção: ");
        scanf("%d", &opcao);

        switch (opcao) {
            case 1:
                printf("Digite o nome do paciente: ");
                scanf(" %[^\n]", nome);
                Paciente* paciente = buscar_paciente(lista, nome);
                exibir_paciente(paciente);
                break;
            case 2:
                listar_pacientes(lista);
                break;
            case 3:
                printf("Cadastrar paciente (não implementado).\n");
                break;
            case 4:
                printf("Alterar cadastro (não implementado).\n");
                break;
            case 5:
                printf("Voltando ao menu principal.\n");
                break;
            default:
                printf("Opção inválida.\n");
        }
    } while (opcao != 5);
}

// Função para exibir o menu principal
void menu_principal(ListaDupla* lista) {
    int opcao;

    do {
        printf("\n--- Menu Principal ---\n");
        printf("1. Pacientes do Moisés\n");
        printf("2. Pacientes da Liz\n");
        printf("3. Finalizar programa\n");
        printf("Escolha uma opção: ");
        scanf("%d", &opcao);

        switch (opcao) {
            case 1:
                menu_moises(lista);
                break;
            case 2:
                printf("Pacientes da Liz (não implementado).\n");
                break;
            case 3:
                printf("Finalizando programa.\n");
                break;
            default:
                printf("Opção inválida.\n");
        }
    } while (opcao != 3);
}

// Função principal
int main(int argc, char* argv[]) {
    if (argc != 2) {
        printf("Uso: %s <arquivo.csv>\n", argv[0]);
        return 1;
    }

    ListaDupla* lista = criar_lista();
    carregar_pacientes(lista, argv[1]);

    menu_principal(lista);

    // Liberar memória (a ser implementado)
    return 0;
}
